#
# JDBC properties
#
spring.datasource.url=jdbc:mysql://localhost:3306/game_ranking_system_db
spring.datasource.username=root
spring.datasource.password=password
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# spring.datasource.driver-class-name= com.mysql.cj.jdbc.Driver
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto= update
# spring.jpa.show-sql=true

#
# Insert data after startup project
#
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always

security.basic.enabled=false

#
# Spring Data REST properties
#
spring.data.rest.base-path=/api
spring.data.rest.detection-strategy=ANNOTATED
# spring.data.rest.default-page-size=20

#
# Custom properties
#
allowed.origins=https://localhost:4200

# Turn off the Spring Boot banner
spring.main.banner-mode=off

#
# Logging Levels
#
# ERROR: Critical issues.
# WARN: Potential issues.
# INFO: General information.
# DEBUG: Detailed debugging.
# TRACE: Very detailed debugging.
# OFF: Disable logging.
# Reduce logging level to WARN. Default is INFO.
logging.level.root=WARN
# Show JPA/Hibernate logging messages
logging.level.org.hibernate.SQL=TRACE
logging.level.org.hibernate.orm.jdbc.bind=TRACE

#
# Spring Web properties
#
logging.level.org.springframework.web=INFO

#
# Spring Security properties
#
logging.level.org.springframework.security=DEBUG

#
# Spring Actuator properties
#
# Use wildcard "*" to expose all endpoints
# Can also expose individual endpoints with a comma-delimited list
management.endpoints.web.exposure.include=*
# management.endpoints.web.exposure.exclude=health,info
management.info.env.enabled=true
info.app.name=Game Ranking System App
info.app.description=Game Ranking System App for Capstone Project at Per Scholas
info.app.version=1.0.0

#
# Change Spring Boot embedded server port
#
server.port=8080

#
# Set the context path of the application
#
# All requests should be prefixed with /myapp
#
# server.servlet.context-path=/myapp

# enable lazy initialization for all beans in the application context
# by deferring their creation until they are actually needed
# Benefits
# Improved Startup Time: The application starts faster by deferring bean creation.
# Resource Efficiency: Beans are created only when needed, saving memory and CPU.
# Considerations
# Potential Delays: The first request to a lazily initialized bean may take longer.
# Error Detection: Bean creation errors might appear at runtime instead of startup.
# spring.main.lazy-initialization=true